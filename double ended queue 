#include <iostream>
using namespace std;

class Deque {
    int arr[10];
    int front, rear, maxSize;

public:
    Deque() {
        front = -1;
        rear = 0;
        maxSize = 10;
    }

    bool isFull() {
        return (front == 0 && rear == maxSize - 1) || (front == rear + 1);
    }

    bool isEmpty() {
        return front == -1;
    }

    void insertFront(int val) {
        if (isFull()) {
            cout << "Deque is full\n";
            return;
        }
        if (front == -1) {
            front = 0;
            rear = 0;
        } else if (front == 0) {
            front = maxSize - 1;
        } else {
            front--;
        }
        arr[front] = val;
    }

    void insertRear(int val) {
        if (isFull()) {
            cout << "Deque is full\n";
            return;
        }
        if (front == -1) {
            front = 0;
            rear = 0;
        } else if (rear == maxSize - 1) {
            rear = 0;
        } else {
            rear++;
        }
        arr[rear] = val;
    }

    void removeFront() {
        if (isEmpty()) {
            cout << "Deque is empty\n";
            return;
        }
        if (front == rear) {
            front = -1;
            rear = -1;
        } else if (front == maxSize - 1) {
            front = 0;
        } else {
            front++;
        }
    }

    void removeRear() {
        if (isEmpty()) {
            cout << "Deque is empty\n";
            return;
        }
        if (front == rear) {
            front = -1;
            rear = -1;
        } else if (rear == 0) {
            rear = maxSize - 1;
        } else {
            rear--;
        }
    }

    int getFront() {
        if (isEmpty()) {
            cout << "Deque is empty\n";
            return -1;
        }
        return arr[front];
    }

    int getRear() {
        if (isEmpty()) {
            cout << "Deque is empty\n";
            return -1;
        }
        return arr[rear];
    }

    void display() {
        if (isEmpty()) {
            cout << "Deque is empty\n";
            return;
        }
        int i = front;
        while (true) {
            cout << arr[i] << " ";
            if (i == rear)
                break;
            i = (i + 1) % maxSize;
        }
        cout << endl;
    }
};

int main() {
    Deque dq;
    int choice, val;

    do {
        cout << "\nChoose operation:\n";
        cout << "1. Add to Front\n";
        cout << "2. Add to Rear\n";
        cout << "3. Delete from Front\n";
        cout << "4. Delete from Rear\n";
        cout << "5. Get Front Element\n";
        cout << "6. Get Rear Element\n";
        cout << "7. Display All Elements\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to add to front: ";
                cin >> val;
                dq.insertFront(val);
                break;
            case 2:
                cout << "Enter value to add to rear: ";
                cin >> val;
                dq.insertRear(val);
                break;
            case 3:
                dq.removeFront();
                cout << "Deleted front element\n";
                break;
            case 4:
                dq.removeRear();
                cout << "Deleted rear element\n";
                break;
            case 5:
                val = dq.getFront();
                if (val != -1)
                    cout << "Front element: " << val << endl;
                break;
            case 6:
                val = dq.getRear();
                if (val != -1)
                    cout << "Rear element: " << val << endl;
                break;
            case 7:
                cout << "Elements in deque: ";
                dq.display();
                break;
            case 8:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice, try again.\n";
        }
    } while (choice != 8);

    return 0;
}